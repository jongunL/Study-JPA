<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 스프링 프레임워크가 제공하는 어노테이션 기반의 트랜잭션 관리자를 활성화 -->
	<!-- 이 기능은 @Transaction이 붙은 곳에 트랜잭션을 적용한다. -->
    <tx:annotation-driven/>

    <context:component-scan base-package="jpabook.jpashop.service, jpabook.jpashop.repository"/>

	<!-- DB에 접근할 데이터 소스를 등록한다. (여기서는 h2DB의 인 메모리 DB를 사용했다. 이때는 별도의 DB 서버를 실행하지 않아도 된다.) -->
    <bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource">
        <property name="driverClassName" value="org.h2.Driver"/>
        <property name="url" value="jdbc:h2:mem:jpashop"/>
        <property name="username" value="sa"/>
        <property name="password" value=""/>
    </bean>

	<!-- 트랜잭션 관리자 설정 -->
	<!-- 주로 트랜잭션 시작 및 종료 관리, 트랜잭션 전파 및 고립 수준, EntitiyManager 관리 등을 수행한다.-->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- JPA 예외를 스프링 예외로 변환 -->
    <!-- @Repository어노테이션이 붙어 있는 스프링 빈에 예외 변환 AOP를 적용하여 JPA 예외를 스프링 프레임워크가 추상화한 예외로 변환해준다. -->
    <!-- 추상화한 예외를 사용하면 일관되게 예외 처리를 할 수 있으며, 중속성 감소 및 코드의 유연성 증가, 캡슐화 및 정보 은닉, 가독성과 유지보수성 향상,
    	  기능별 세분환된 예외 처리, 애플리케이션 전반에 걸친 예외 정책 구현, 테스트 용이성이 좋다. -->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

	<!-- 스프링 프레임워크에서 JPA를 사용하려면 스프링 프레임워크가 제공하는 LocalContainerEntityManagerFactoryBean을 스프링 빈으로 등록해야 한다. -->
	<!-- 순수하게 자바만 사용하는 J2SE 환경에서는 persistence.xml에 엔티티 매니저 팩토리 정보를 설정하지만 스프링 프레임워크에서 JPA를 사용하려면 스프링 프레임워크가 제공하는 방식으로
	     엔티티 매니저 팩토리를 등록해야 한다. (여기서 필요한 설정을 다 할 수 있기 떄문에 persistence.xml이 없어도 동작한다. 또한 persistenceUnitName 속성을 사용해서 영속성 유닛 이름을
	     지정하면 persistence.xml에 설정한 정보도 사용할 수 있다.) -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="jpabook.jpashop.domain"/> <!-- @Entity 탐색 시작 위치 -->
        <property name="jpaVendorAdapter">
            <!-- 하이버네이트 구현체 사용 -->
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
        </property>
        <property name="jpaProperties"> <!-- 하이버네이트 상세 설정 -->
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.H2Dialect</prop> 	<!-- 방언 -->
                <prop key="hibernate.show_sql">true</prop>                   			<!-- SQL 보기 -->
                <prop key="hibernate.format_sql">true</prop>                 			<!-- SQL 정렬해서 보기 -->
                <prop key="hibernate.use_sql_comments">true</prop>           			<!-- SQL 코멘트 보기 -->
                <prop key="hibernate.id.new_generator_mappings">true</prop>  			<!-- 새 버전의 ID 생성 옵션 -->
                <prop key="hibernate.hbm2ddl.auto">create</prop>             			<!-- DDL 자동 생성  - 4가지 옵션이 있다.-->
            </props>
        </property>
    </bean>

</beans>